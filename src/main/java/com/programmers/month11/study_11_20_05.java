package com.programmers.month11;

/* 요구사항
- D1 완료 : '오리'클래스와 '날다'메서드를 만들어서 처리
- D2 완료 : '청둥오리', '흰오리'클래스와 '날다'메서드를 각 클래스마다 만들어서 처리
- D3 완료 : 상속을 사용해서 처리. '오리'클래스에 '날다' 메소드를 생성하여 부모클래스로 만들고 자식 클래스는 extends를 사용
- D4 완료 : '고무오리'클래스와 '날다'메서드를 만들어서 처리. '고무오리'클래스에서 직접 '날다'메소드를 만들지는 않음.
- D6 완료 : 고무2오리를 '고무오리'와 같은 오버라이딩으로 추가
- D7 완료 : 고무2오리 클래스가 고무오리를 상속받아서 중복제거. 고무오리의 '날다' 메소드 자동으로 이용가능

- D8 요구 : 중복이 없어야 합니다.
- 결과 : 완전한 중복 제거는 불가능 하다. 객체들이 실행하고자 하는 동작이 다르면 상속만으로는 중복제거가 불가능하다.
*/

public class study_11_20_05 {
    public static void main(String[] args) {
        로봇오리 a로봇오리 = new 로봇오리();
        a로봇오리.날다();
        // 출력 : 저는 못 날아요 ㅠㅠ
        a로봇오리.수영하다();
        // 출력 : 물갈퀴로 수영합니다.
    }
}

class 오리 {
    void 날다(){ //D1 완료
        System.out.println("오리가 날개로 날아갑니다.");
    }
    void 수영하다() {
        System.out.println("물갈퀴로 수영합니다.");
    }
}

//'오리'가 부모 클래스이고, '청둥오리'와 '흰오리'는 '오리'(부모)의 메소드를
//상속받아서 사용 가능하게 된다.
//클래스와 객체는 '명사', 메서드는 '동사'
class 청둥오리 extends 오리{ //D3 완료

}

class 흰오리 extends 오리 { //D3 완료

}

class 고무오리 extends 오리 {
    //메서드 재정의(오버라이드) => 부모가 물려준 메소드를 다시 구현한다.
    //같은 이름의 메소드에 실행 내용이 달라짐.
    @Override
    void 날다() {
        //super.날다(); //이렇게 하면 부모의 날다()메소드를 호출하므로 오리가 날개로 날아갑니다. 가 출력됨.
        System.out.println("저는 날 수 없어요. ㅜㅠ");
    }
    void 수영하다() {
        System.out.println("물에 둥둥 뜹니다.");
    }
}

class 고무2오리 extends 고무오리 { //'오리' 대신 '고무오리'를 상속받아 '고무오리'와 같은 '날다' 메소드 사용 가능해짐. 중복 제거

}

class 로봇오리 extends 오리 {
    void 날다() { // 상속만으로는 완벽한 중복제거가 불가능한 상황이 옵니다. 즉 실패
        System.out.println("저는 못 날아요 ㅠㅠ");
    }
}